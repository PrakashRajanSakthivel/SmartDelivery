import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { RestaurantService } from '../../services/restaurant.service';
import { CartService } from '../../services/cart.service';
import { Restaurant, Category, MenuItem } from '../../models/restaurant.model';

@Component({
  selector: 'app-restaurant-menu',
  templateUrl: './restaurant-menu.component.html',
  styleUrls: ['./restaurant-menu.component.css']
})
export class RestaurantMenuComponent implements OnInit {
  restaurant: Restaurant | null = null;
  loading = false;
  error: string | null = null;
  selectedCategory: string | null = null;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private restaurantService: RestaurantService,
    private cartService: CartService
  ) { }

  ngOnInit(): void {
    this.loadRestaurant();
  }

  loadRestaurant(): void {
    this.loading = true;
    this.error = null;
    
    const restaurantId = this.route.snapshot.paramMap.get('id');
    if (!restaurantId) {
      this.error = 'Restaurant ID not found';
      this.loading = false;
      return;
    }

    this.restaurantService.getRestaurantDetails(restaurantId).subscribe({
      next: (restaurant) => {
        this.restaurant = restaurant;
        if (restaurant && restaurant.categories.length > 0) {
          this.selectedCategory = restaurant.categories[0].id;
        }
        this.loading = false;
      },
      error: (error) => {
        this.error = 'Failed to load restaurant details. Please try again.';
        this.loading = false;
        console.error('Error loading restaurant:', error);
      }
    });
  }

  selectCategory(categoryId: string): void {
    this.selectedCategory = categoryId;
  }

  addToCart(menuItem: MenuItem): void {
    if (!this.restaurant) return;
    
    this.cartService.addItem({
      id: '', // Will be generated by CartService
      menuItemId: menuItem.id,
      menuItemName: menuItem.name,
      quantity: 1,
      unitPrice: menuItem.price,
      totalPrice: menuItem.price,
      imageUrl: menuItem.imageUrl
    });
  }

  getSelectedCategory(): Category | null {
    if (!this.restaurant || !this.selectedCategory) return null;
    return this.restaurant.categories.find(cat => cat.id === this.selectedCategory) || null;
  }

  getCartItemCount(): number {
    return this.cartService.getCartItemCount();
  }

  goToCart(): void {
    this.router.navigate(['/cart']);
  }

  goBack(): void {
    this.router.navigate(['/']);
  }

  getFoodIcon(itemName: string): string {
    const name = itemName.toLowerCase();
    if (name.includes('pizza')) return 'local_pizza';
    if (name.includes('burger')) return 'fastfood';
    if (name.includes('sushi') || name.includes('roll')) return 'set_meal';
    if (name.includes('pasta') || name.includes('spaghetti')) return 'ramen_dining';
    if (name.includes('salad')) return 'eco';
    if (name.includes('fries')) return 'fastfood';
    if (name.includes('chicken')) return 'restaurant';
    if (name.includes('fish') || name.includes('salmon')) return 'set_meal';
    if (name.includes('steak') || name.includes('beef')) return 'restaurant';
    if (name.includes('soup')) return 'soup_kitchen';
    if (name.includes('coffee') || name.includes('latte')) return 'local_cafe';
    if (name.includes('cake') || name.includes('dessert')) return 'cake';
    if (name.includes('ice cream')) return 'icecream';
    if (name.includes('drink') || name.includes('soda')) return 'local_bar';
    if (name.includes('bread') || name.includes('toast')) return 'bakery_dining';
    if (name.includes('egg')) return 'egg';
    if (name.includes('milk') || name.includes('cream')) return 'local_drink';
    return 'restaurant'; // default icon
  }
} 